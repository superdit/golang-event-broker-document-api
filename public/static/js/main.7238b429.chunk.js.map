{"version":3,"sources":["Component/loading.js","history.js","App.js","serviceWorker.js","Redux/Backend/reducers.js","Redux/Models/reducers.js","Redux/Events/reducers.js","Redux/Subscriber/reducers.js","Redux/Reducers.js","index.js"],"names":["Loading","className","createBrowserHistory","Layout","lazy","App","history","fallback","render","props","Boolean","window","location","hostname","match","initialState","isLoading","dataBackend","postBackend","editBackend","BackendData","state","action","type","datas","data","dataModels","ModelsData","dataEvent","dataSearch","EventData","dataEventSearch","dataSubscriber","SubscriberData","Reducers","combineReducers","backend","models","events","subscriber","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAA,sBAqBeA,IAnBC,WAEZ,OACI,mCACI,sBAAKC,UAAU,SAAf,UACI,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,qBAAKA,UAAU,aACf,mD,oKCbDC,gB,OCETC,EAASC,gBAAK,kBAAM,sDAEX,SAASC,IAEtB,OACE,cAAC,IAAD,CAAeC,QAASA,EAAxB,SACE,cAAC,WAAD,CAAUC,SACR,cAAC,IAAD,IADF,SAGE,cAAC,IAAD,CAAOC,OAAQ,SAACC,GAAD,OACb,cAAC,IAAD,UACE,cAACN,EAAD,eAAYM,aCHJC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,YClBFC,EAAe,CACjBC,WAAW,EACXC,YAAa,GACbC,YAAa,GACbC,YAAa,IAkBFC,EAhBK,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAClD,OAAQA,EAAOC,MACX,IAAK,uBACD,OAAO,2BAAKF,GAAZ,IAAmBJ,YAAaK,EAAOE,QAC3C,IAAK,kBACD,OAAO,2BAAKH,GAAZ,IAAmBL,UAAWM,EAAOG,OACzC,IAAK,uBACD,OAAO,2BAAKJ,GAAZ,IAAmBH,YAAaI,EAAOE,QAC3C,IAAK,uBACD,OAAO,2BAAKH,GAAZ,IAAmBF,YAAaG,EAAOE,QAC3C,QACI,OAAOH,ICjBbN,EAAe,CACjBC,WAAW,EACXU,WAAY,IAeDC,EAbI,WAAmC,IAAlCN,EAAiC,uDAAzBN,EAAcO,EAAW,uCACjD,OAAQA,EAAOC,MACX,IAAK,sBACD,OAAO,2BAAKF,GAAZ,IAAmBK,WAAYJ,EAAOE,QAC1C,IAAK,gBACD,OAAO,2BAAKH,GAAZ,IAAmBL,UAAWM,EAAOG,OAEzC,QACI,OAAOJ,ICZbN,EAAe,CACjBC,WAAW,EACXY,UAAW,GACXC,WAAY,IAiBDC,EAfG,WAAmC,IAAlCT,EAAiC,uDAAzBN,EAAcO,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,sBACD,OAAO,2BAAKF,GAAZ,IAAmBO,UAAWN,EAAOE,QACzC,IAAK,gBACD,OAAO,2BAAKH,GAAZ,IAAmBL,UAAWM,EAAOG,OACzC,IAAK,6BACD,OAAO,2BAAKJ,GAAZ,IAAmBU,gBAAiBT,EAAOE,QAE/C,QACI,OAAOH,ICfbN,EAAe,CACjBC,WAAW,EACXgB,eAAgB,GAChBH,WAAY,IAiBDI,EAdQ,WAAmC,IAAlCZ,EAAiC,uDAAzBN,EAAcO,EAAW,uCACrD,OAAQA,EAAOC,MACX,IAAK,0BACD,OAAO,2BAAKF,GAAZ,IAAmBW,eAAgBV,EAAOE,QAC9C,IAAK,qBACD,OAAO,2BAAKH,GAAZ,IAAmBL,UAAWM,EAAOG,OACzC,IAAK,iCACD,OAAO,2BAAKJ,GAAZ,IAAmBQ,WAAYP,EAAOE,QAC1C,QACI,OAAOH,ICDJa,EAPEC,YAAgB,CAC9BC,UACAC,SACAC,SACAC,e,gBCDGC,EAAQC,YAAYC,EAAaC,YAAgBC,MAEvDC,IAASrC,OACP,cAAC,IAAMsC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAACnC,EAAD,QAGJ0C,SAASC,eAAe,SNiHlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7238b429.chunk.js","sourcesContent":["import React from 'react'\nimport './loading.css'\nconst Loading = () => {\n\n    return (\n        <>\n            <div className=\"middle\">\n                <div className=\"bar bar1\"></div>\n                <div className=\"bar bar2\"></div>\n                <div className=\"bar bar3\"></div>\n                <div className=\"bar bar4\"></div>\n                <div className=\"bar bar5\"></div>\n                <div className=\"bar bar6\"></div>\n                <div className=\"bar bar7\"></div>\n                <div className=\"bar bar8\"></div>\n                <div>Loading..</div>\n            </div>\n        </>\n    )\n}\n\nexport default Loading\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory()","import { lazy, Suspense } from \"react\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport Loading from \"./Component/loading\";\nimport history from \"./history\";\nconst Layout = lazy(() => import(\"./Component/Layout\"));\n\nexport default function App() {\n\n  return (\n    <BrowserRouter history={history}>\n      <Suspense fallback={\n        <Loading/>\n      }>\n        <Route render={(props) => (\n          <Switch>\n            <Layout {...props}>\n            </Layout>\n          </Switch>\n        )} />\n      </Suspense>\n\n    </BrowserRouter >\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","const initialState = {\n    isLoading: false,\n    dataBackend: [],\n    postBackend: [],\n    editBackend: [],\n}\nconst BackendData = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_BACKEND_SUCCESS':\n            return { ...state, dataBackend: action.datas }\n        case 'BACKEND_LOADING':\n            return { ...state, isLoading: action.data };\n        case 'POST_BACKEND_SUCCESS':\n            return { ...state, postBackend: action.datas }\n        case 'EDIT_BACKEND_SUCCESS':\n            return { ...state, editBackend: action.datas }\n        default:\n            return state\n    }\n\n}\n\nexport default BackendData","const initialState = {\n    isLoading: false,\n    dataModels: []\n}\nconst ModelsData = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_MODELS_SUCCESS':\n            return { ...state, dataModels: action.datas }\n        case 'MODEL_LOADING':\n            return { ...state, isLoading: action.data };\n\n        default:\n            return state\n    }\n\n}\n\nexport default ModelsData","const initialState = {\n    isLoading: false,\n    dataEvent: [],\n    dataSearch: []\n}\nconst EventData = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_EVENTS_SUCCESS':\n            return { ...state, dataEvent: action.datas }\n        case 'EVENT_LOADING':\n            return { ...state, isLoading: action.data };\n        case 'LOAD_EVENTS_SEARCH_SUCCESS':\n            return { ...state, dataEventSearch: action.datas }\n\n        default:\n            return state\n    }\n\n}\n\nexport default EventData","const initialState = {\n    isLoading: false,\n    dataSubscriber: [],\n    dataSearch: []\n\n}\nconst SubscriberData = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_SUBSCRIBER_SUCCESS':\n            return { ...state, dataSubscriber: action.datas }\n        case 'SUBSCRIBER_LOADING':\n            return { ...state, isLoading: action.data };\n        case 'LOAD_SUBSCRIBER_SEARCH_SUCCESS':\n            return { ...state, dataSearch: action.datas }\n        default:\n            return state\n    }\n\n}\n\nexport default SubscriberData","import { combineReducers } from 'redux';\nimport backend from './Backend/reducers';\nimport models from './Models/reducers';\nimport events from './Events/reducers';\nimport subscriber from './Subscriber/reducers';\n\n\nconst Reducers = combineReducers({\n   backend,\n   models,\n   events,\n   subscriber\n});\n\nexport default Reducers;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./Redux/Reducers\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}